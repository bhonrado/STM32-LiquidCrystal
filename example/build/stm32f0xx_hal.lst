ARM GAS  /tmp/cc3AQi3H.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_hal.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_MspInit,"ax",%progbits
  18              		.align	2
  19              		.weak	HAL_MspInit
  20              		.code	16
  21              		.thumb_func
  23              	HAL_MspInit:
  24              		.fnstart
  25              	.LFB36:
  26              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @file    stm32f0xx_hal.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief   HAL module driver.
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *          This is the common part of the HAL initialization
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   @verbatim
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   ==============================================================================
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****                      ##### How to use this driver #####
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   ==============================================================================
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     [..]
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     [..]
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     The HAL contains two APIs categories:
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****          (+) HAL Initialization and de-initialization functions
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****          (+) HAL Control functions
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   @endverbatim
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   ******************************************************************************
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @attention
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * are permitted provided that the following conditions are met:
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *      this list of conditions and the following disclaimer.
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *      and/or other materials provided with the distribution.
ARM GAS  /tmp/cc3AQi3H.s 			page 2


  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *      without specific prior written permission.
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   ******************************************************************************
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #include "stm32f0xx_hal.h"
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @addtogroup STM32F0xx_HAL_Driver
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL HAL
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief HAL module driver.
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #ifdef HAL_MODULE_ENABLED
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Private define ------------------------------------------------------------*/
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Private_Constants HAL Private Constants
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** 
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief STM32F0xx HAL Driver version number V1.7.0
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define __STM32F0xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define __STM32F0xx_HAL_VERSION_SUB1   (0x07) /*!< [23:16] sub1 version */
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define __STM32F0xx_HAL_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define __STM32F0xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */ 
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define __STM32F0xx_HAL_VERSION         ((__STM32F0xx_HAL_VERSION_MAIN << 24U)\
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****                                         |(__STM32F0xx_HAL_VERSION_SUB1 << 16U)\
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****                                         |(__STM32F0xx_HAL_VERSION_SUB2 << 8U )\
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****                                         |(__STM32F0xx_HAL_VERSION_RC))
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #define IDCODE_DEVID_MASK    (0x00000FFFU)
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @}
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Private_Macros HAL Private Macros
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
ARM GAS  /tmp/cc3AQi3H.s 			page 3


  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @}
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Private_Variables HAL Private Variables
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __IO uint32_t uwTick;
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @}
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /* Exported functions ---------------------------------------------------------*/
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief    Initialization and de-initialization functions
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** @verbatim
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  ===============================================================================
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****               ##### Initialization and de-initialization functions #####
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  ===============================================================================
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    [..]  This section provides functions allowing to:
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Initializes the Flash interface, the NVIC allocation and initial clock 
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****           configuration. It initializes the source of time base also when timeout 
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****           is needed and the backup domain when enabled.
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) de-Initializes common part of the HAL.
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****           Tick interrupt priority. 
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              handled in milliseconds basis.
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****             ISR process will be blocked. 
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****        (++) functions affecting time base configurations are declared as __Weak  
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** @endverbatim
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  This function configures the Flash prefetch,
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        Configures time base source, NVIC and Low level hardware
ARM GAS  /tmp/cc3AQi3H.s 			page 4


 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is called at the beginning of program after reset and before 
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       the clock configuration
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note The time base configuration is based on HSI clock when exiting from Reset.
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       Once done, time base tick start incrementing.
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       In the default implementation,Systick is used as source of time base.
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       The tick variable is incremented each 1ms in its ISR.
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval HAL status
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Configure Flash prefetch */ 
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #if (PREFETCH_ENABLE != 0)
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #endif /* PREFETCH_ENABLE */
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Init the low level hardware */
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   HAL_MspInit();
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Return function status */
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   return HAL_OK;
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief This function de-Initializes common part of the HAL and stops the source
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        of time base.
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is optional.
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval HAL status
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Reset of all peripherals */
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_AHB_FORCE_RESET();
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_AHB_RELEASE_RESET();
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* De-Init the low level hardware */
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   HAL_MspDeInit();
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Return function status */
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   return HAL_OK;
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Initializes the MSP.
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_MspInit(void)
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
ARM GAS  /tmp/cc3AQi3H.s 			page 5


  27              		.loc 1 203 0
  28              		.cfi_startproc
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    */
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
  29              		.loc 1 207 0
  30              		@ sp needed
  31 0000 7047     		bx	lr
  32              		.cfi_endproc
  33              	.LFE36:
  34              		.cantunwind
  35              		.fnend
  37 0002 C046     		.section	.text.HAL_MspDeInit,"ax",%progbits
  38              		.align	2
  39              		.weak	HAL_MspDeInit
  40              		.code	16
  41              		.thumb_func
  43              	HAL_MspDeInit:
  44              		.fnstart
  45              	.LFB37:
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  DeInitializes the MSP.
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_MspDeInit(void)
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
  46              		.loc 1 214 0
  47              		.cfi_startproc
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    */
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
  48              		.loc 1 218 0
  49              		@ sp needed
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE37:
  53              		.cantunwind
  54              		.fnend
  56 0002 C046     		.section	.text.HAL_DeInit,"ax",%progbits
  57              		.align	2
  58              		.global	HAL_DeInit
  59              		.code	16
  60              		.thumb_func
  62              	HAL_DeInit:
  63              		.fnstart
  64              	.LFB35:
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Reset of all peripherals */
  65              		.loc 1 180 0
  66              		.cfi_startproc
  67 0000 08B5     		push	{r3, lr}
  68              		.save {r3, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 3, -8
ARM GAS  /tmp/cc3AQi3H.s 			page 6


  72              		.cfi_offset 14, -4
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  73              		.loc 1 182 0
  74 0002 074B     		ldr	r3, .L4
  75 0004 0121     		mov	r1, #1
  76 0006 4942     		neg	r1, r1
  77 0008 1961     		str	r1, [r3, #16]
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  78              		.loc 1 183 0
  79 000a 0022     		mov	r2, #0
  80 000c 1A61     		str	r2, [r3, #16]
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  81              		.loc 1 185 0
  82 000e D960     		str	r1, [r3, #12]
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  83              		.loc 1 186 0
  84 0010 DA60     		str	r2, [r3, #12]
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   __HAL_RCC_AHB_RELEASE_RESET();
  85              		.loc 1 188 0
  86 0012 9962     		str	r1, [r3, #40]
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  87              		.loc 1 189 0
  88 0014 9A62     		str	r2, [r3, #40]
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     
  89              		.loc 1 192 0
  90 0016 FFF7FEFF 		bl	HAL_MspDeInit
  91              	.LVL0:
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
  92              		.loc 1 196 0
  93 001a 0020     		mov	r0, #0
  94              		@ sp needed
  95 001c 08BD     		pop	{r3, pc}
  96              	.L5:
  97 001e C046     		.align	2
  98              	.L4:
  99 0020 00100240 		.word	1073876992
 100              		.cfi_endproc
 101              	.LFE35:
 102              		.fnend
 104              		.global	__aeabi_uidiv
 105              		.section	.text.HAL_InitTick,"ax",%progbits
 106              		.align	2
 107              		.weak	HAL_InitTick
 108              		.code	16
 109              		.thumb_func
 111              	HAL_InitTick:
 112              		.fnstart
 113              	.LFB38:
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief This function configures the source of the time base. 
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        Tick interrupt priority.
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
ARM GAS  /tmp/cc3AQi3H.s 			page 7


 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       The function is declared as __Weak  to be overwritten  in case of other
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementation  in user file.
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @param TickPriority Tick interrupt priority.
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval HAL status
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 114              		.loc 1 237 0
 115              		.cfi_startproc
 116              	.LVL1:
 117 0000 10B5     		push	{r4, lr}
 118              		.save {r4, lr}
 119              	.LCFI1:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
 123 0002 041C     		mov	r4, r0
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 124              		.loc 1 239 0
 125 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 126              	.LVL2:
 127 0008 FA21     		mov	r1, #250
 128 000a 8900     		lsl	r1, r1, #2
 129 000c FFF7FEFF 		bl	__aeabi_uidiv
 130              	.LVL3:
 131 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 132              	.LVL4:
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /*Configure the SysTick IRQ priority */
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 133              		.loc 1 242 0
 134 0014 0120     		mov	r0, #1
 135 0016 4042     		neg	r0, r0
 136 0018 211C     		mov	r1, r4
 137 001a 0022     		mov	r2, #0
 138 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 139              	.LVL5:
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    /* Return function status */
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   return HAL_OK;
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 140              		.loc 1 246 0
 141 0020 0020     		mov	r0, #0
 142              		@ sp needed
 143              	.LVL6:
 144 0022 10BD     		pop	{r4, pc}
 145              		.cfi_endproc
 146              	.LFE38:
 147              		.fnend
 149              		.section	.text.HAL_Init,"ax",%progbits
 150              		.align	2
 151              		.global	HAL_Init
 152              		.code	16
ARM GAS  /tmp/cc3AQi3H.s 			page 8


 153              		.thumb_func
 155              	HAL_Init:
 156              		.fnstart
 157              	.LFB34:
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Configure Flash prefetch */ 
 158              		.loc 1 156 0
 159              		.cfi_startproc
 160 0000 08B5     		push	{r3, lr}
 161              		.save {r3, lr}
 162              	.LCFI2:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 3, -8
 165              		.cfi_offset 14, -4
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** #endif /* PREFETCH_ENABLE */
 166              		.loc 1 159 0
 167 0002 064A     		ldr	r2, .L8
 168 0004 1168     		ldr	r1, [r2]
 169 0006 1023     		mov	r3, #16
 170 0008 0B43     		orr	r3, r1
 171 000a 1360     		str	r3, [r2]
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 172              		.loc 1 164 0
 173 000c 0020     		mov	r0, #0
 174 000e FFF7FEFF 		bl	HAL_InitTick
 175              	.LVL7:
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 176              		.loc 1 167 0
 177 0012 FFF7FEFF 		bl	HAL_MspInit
 178              	.LVL8:
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 179              		.loc 1 171 0
 180 0016 0020     		mov	r0, #0
 181              		@ sp needed
 182 0018 08BD     		pop	{r3, pc}
 183              	.L9:
 184 001a C046     		.align	2
 185              	.L8:
 186 001c 00200240 		.word	1073881088
 187              		.cfi_endproc
 188              	.LFE34:
 189              		.fnend
 191              		.section	.text.HAL_IncTick,"ax",%progbits
 192              		.align	2
 193              		.weak	HAL_IncTick
 194              		.code	16
 195              		.thumb_func
 197              	HAL_IncTick:
 198              		.fnstart
 199              	.LFB39:
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @}
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief    HAL Control functions
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *
ARM GAS  /tmp/cc3AQi3H.s 			page 9


 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** @verbatim
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  ===============================================================================
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****                       ##### HAL Control functions #####
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  ===============================================================================
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****     [..]  This section provides functions allowing to:
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Provide a tick value in millisecond
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Provide a blocking delay in millisecond
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Suspend the time base source interrupt
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Resume the time base source interrupt
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Get the HAL API driver version
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Get the device identifier
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Get the device revision identifier
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Enable/Disable Debug module during Sleep mode
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****       
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** @endverbatim
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @{
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        used as application time base.
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       in Systick ISR.
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementations in user file.
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_IncTick(void)
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 200              		.loc 1 285 0
 201              		.cfi_startproc
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   uwTick++;
 202              		.loc 1 286 0
 203 0000 024A     		ldr	r2, .L11
 204 0002 1368     		ldr	r3, [r2]
 205 0004 0133     		add	r3, r3, #1
 206 0006 1360     		str	r3, [r2]
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 207              		.loc 1 287 0
 208              		@ sp needed
 209 0008 7047     		bx	lr
 210              	.L12:
 211 000a C046     		.align	2
 212              	.L11:
 213 000c 00000000 		.word	.LANCHOR0
 214              		.cfi_endproc
 215              	.LFE39:
 216              		.cantunwind
 217              		.fnend
 219              		.section	.text.HAL_GetTick,"ax",%progbits
 220              		.align	2
 221              		.weak	HAL_GetTick
 222              		.code	16
 223              		.thumb_func
 225              	HAL_GetTick:
ARM GAS  /tmp/cc3AQi3H.s 			page 10


 226              		.fnstart
 227              	.LFB40:
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Provides a tick value in millisecond.
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note   This function is declared as __weak  to be overwritten  in case of other 
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementations in user file.
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval tick value
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 228              		.loc 1 296 0
 229              		.cfi_startproc
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   return uwTick;
 230              		.loc 1 297 0
 231 0000 014B     		ldr	r3, .L14
 232 0002 1868     		ldr	r0, [r3]
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 233              		.loc 1 298 0
 234              		@ sp needed
 235 0004 7047     		bx	lr
 236              	.L15:
 237 0006 C046     		.align	2
 238              	.L14:
 239 0008 00000000 		.word	.LANCHOR0
 240              		.cfi_endproc
 241              	.LFE40:
 242              		.cantunwind
 243              		.fnend
 245              		.section	.text.HAL_Delay,"ax",%progbits
 246              		.align	2
 247              		.weak	HAL_Delay
 248              		.code	16
 249              		.thumb_func
 251              	HAL_Delay:
 252              		.fnstart
 253              	.LFB41:
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief This function provides accurate delay (in milliseconds) based 
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *        on variable incremented.
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       is incremented.
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note ThiS function is declared as __weak to be overwritten in case of other
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementations in user file.
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @param Delay specifies the delay time length, in milliseconds.
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 254              		.loc 1 312 0
 255              		.cfi_startproc
 256              	.LVL9:
 257 0000 30B5     		push	{r4, r5, lr}
 258              		.save {r4, r5, lr}
 259              	.LCFI3:
ARM GAS  /tmp/cc3AQi3H.s 			page 11


 260              		.cfi_def_cfa_offset 12
 261              		.cfi_offset 4, -12
 262              		.cfi_offset 5, -8
 263              		.cfi_offset 14, -4
 264              		.pad #12
 265 0002 83B0     		sub	sp, sp, #12
 266              	.LCFI4:
 267              		.cfi_def_cfa_offset 24
 268 0004 0190     		str	r0, [sp, #4]
 269              	.LBB2:
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 270              		.loc 1 313 0
 271 0006 FFF7FEFF 		bl	HAL_GetTick
 272              	.LVL10:
 273 000a 051C     		mov	r5, r0
 274              	.LVL11:
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   uint32_t wait = Delay;
 275              		.loc 1 314 0
 276 000c 019C     		ldr	r4, [sp, #4]
 277              	.LVL12:
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Add a period to guarantee minimum wait */
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 278              		.loc 1 317 0
 279 000e 631C     		add	r3, r4, #1
 280 0010 00D0     		beq	.L18
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   {
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****      wait++;
 281              		.loc 1 319 0
 282 0012 0134     		add	r4, r4, #1
 283              	.LVL13:
 284              	.L18:
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   }
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   while((HAL_GetTick() - tickstart) < wait)
 285              		.loc 1 322 0 discriminator 1
 286 0014 FFF7FEFF 		bl	HAL_GetTick
 287              	.LVL14:
 288 0018 401B     		sub	r0, r0, r5
 289 001a 8442     		cmp	r4, r0
 290 001c FAD8     		bhi	.L18
 291              	.LBE2:
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   {
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   }
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 292              		.loc 1 325 0
 293 001e 03B0     		add	sp, sp, #12
 294              		@ sp needed
 295              	.LVL15:
 296              	.LVL16:
 297 0020 30BD     		pop	{r4, r5, pc}
 298              		.cfi_endproc
 299              	.LFE41:
 300              		.fnend
 302 0022 C046     		.section	.text.HAL_SuspendTick,"ax",%progbits
 303              		.align	2
 304              		.weak	HAL_SuspendTick
ARM GAS  /tmp/cc3AQi3H.s 			page 12


 305              		.code	16
 306              		.thumb_func
 308              	HAL_SuspendTick:
 309              		.fnstart
 310              	.LFB42:
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief Suspend Tick increment.
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       is called, the the SysTick interrupt will be disabled and so Tick increment 
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       is suspended.
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementations in user file.
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_SuspendTick(void)
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 311              		.loc 1 339 0
 312              		.cfi_startproc
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Disable SysTick Interrupt */
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 313              		.loc 1 341 0
 314 0000 024A     		ldr	r2, .L20
 315 0002 1368     		ldr	r3, [r2]
 316 0004 0221     		mov	r1, #2
 317 0006 8B43     		bic	r3, r1
 318 0008 1360     		str	r3, [r2]
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 319              		.loc 1 342 0
 320              		@ sp needed
 321 000a 7047     		bx	lr
 322              	.L21:
 323              		.align	2
 324              	.L20:
 325 000c 10E000E0 		.word	-536813552
 326              		.cfi_endproc
 327              	.LFE42:
 328              		.cantunwind
 329              		.fnend
 331              		.section	.text.HAL_ResumeTick,"ax",%progbits
 332              		.align	2
 333              		.weak	HAL_ResumeTick
 334              		.code	16
 335              		.thumb_func
 337              	HAL_ResumeTick:
 338              		.fnstart
 339              	.LFB43:
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief Resume Tick increment.
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       is called, the the SysTick interrupt will be enabled and so Tick increment 
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       is resumed.
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @note This function is declared as __weak  to be overwritten  in case of other
ARM GAS  /tmp/cc3AQi3H.s 			page 13


 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   *       implementations in user file.
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** __weak void HAL_ResumeTick(void)
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 340              		.loc 1 355 0
 341              		.cfi_startproc
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   /* Enable SysTick Interrupt */
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 342              		.loc 1 357 0
 343 0000 024A     		ldr	r2, .L23
 344 0002 1168     		ldr	r1, [r2]
 345 0004 0223     		mov	r3, #2
 346 0006 0B43     		orr	r3, r1
 347 0008 1360     		str	r3, [r2]
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 348              		.loc 1 358 0
 349              		@ sp needed
 350 000a 7047     		bx	lr
 351              	.L24:
 352              		.align	2
 353              	.L23:
 354 000c 10E000E0 		.word	-536813552
 355              		.cfi_endproc
 356              	.LFE43:
 357              		.cantunwind
 358              		.fnend
 360              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 361              		.align	2
 362              		.global	HAL_GetHalVersion
 363              		.code	16
 364              		.thumb_func
 366              	HAL_GetHalVersion:
 367              		.fnstart
 368              	.LFB44:
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  This method returns the HAL revision
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 369              		.loc 1 365 0
 370              		.cfi_startproc
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****  return __STM32F0xx_HAL_VERSION;
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 371              		.loc 1 367 0
 372 0000 0048     		ldr	r0, .L26
 373              		@ sp needed
 374 0002 7047     		bx	lr
 375              	.L27:
 376              		.align	2
 377              	.L26:
 378 0004 00000701 		.word	17235968
 379              		.cfi_endproc
 380              	.LFE44:
 381              		.cantunwind
ARM GAS  /tmp/cc3AQi3H.s 			page 14


 382              		.fnend
 384              		.section	.text.HAL_GetREVID,"ax",%progbits
 385              		.align	2
 386              		.global	HAL_GetREVID
 387              		.code	16
 388              		.thumb_func
 390              	HAL_GetREVID:
 391              		.fnstart
 392              	.LFB45:
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Returns the device revision identifier.
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval Device revision identifier
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetREVID(void)
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 393              		.loc 1 374 0
 394              		.cfi_startproc
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    return((DBGMCU->IDCODE) >> 16U);
 395              		.loc 1 375 0
 396 0000 014B     		ldr	r3, .L29
 397 0002 1868     		ldr	r0, [r3]
 398 0004 000C     		lsr	r0, r0, #16
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 399              		.loc 1 376 0
 400              		@ sp needed
 401 0006 7047     		bx	lr
 402              	.L30:
 403              		.align	2
 404              	.L29:
 405 0008 00580140 		.word	1073829888
 406              		.cfi_endproc
 407              	.LFE45:
 408              		.cantunwind
 409              		.fnend
 411              		.section	.text.HAL_GetDEVID,"ax",%progbits
 412              		.align	2
 413              		.global	HAL_GetDEVID
 414              		.code	16
 415              		.thumb_func
 417              	HAL_GetDEVID:
 418              		.fnstart
 419              	.LFB46:
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Returns the device identifier.
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval Device identifier
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetDEVID(void)
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 420              		.loc 1 383 0
 421              		.cfi_startproc
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 422              		.loc 1 384 0
 423 0000 024B     		ldr	r3, .L32
 424 0002 1868     		ldr	r0, [r3]
 425 0004 0005     		lsl	r0, r0, #20
ARM GAS  /tmp/cc3AQi3H.s 			page 15


 426 0006 000D     		lsr	r0, r0, #20
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 427              		.loc 1 385 0
 428              		@ sp needed
 429 0008 7047     		bx	lr
 430              	.L33:
 431 000a C046     		.align	2
 432              	.L32:
 433 000c 00580140 		.word	1073829888
 434              		.cfi_endproc
 435              	.LFE46:
 436              		.cantunwind
 437              		.fnend
 439              		.section	.text.HAL_GetUIDw0,"ax",%progbits
 440              		.align	2
 441              		.global	HAL_GetUIDw0
 442              		.code	16
 443              		.thumb_func
 445              	HAL_GetUIDw0:
 446              		.fnstart
 447              	.LFB47:
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval Device identifier
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetUIDw0(void)
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 448              		.loc 1 392 0
 449              		.cfi_startproc
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    return(READ_REG(*((uint32_t *)UID_BASE)));
 450              		.loc 1 393 0
 451 0000 014B     		ldr	r3, .L35
 452 0002 1868     		ldr	r0, [r3]
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 453              		.loc 1 394 0
 454              		@ sp needed
 455 0004 7047     		bx	lr
 456              	.L36:
 457 0006 C046     		.align	2
 458              	.L35:
 459 0008 ACF7FF1F 		.word	536868780
 460              		.cfi_endproc
 461              	.LFE47:
 462              		.cantunwind
 463              		.fnend
 465              		.section	.text.HAL_GetUIDw1,"ax",%progbits
 466              		.align	2
 467              		.global	HAL_GetUIDw1
 468              		.code	16
 469              		.thumb_func
 471              	HAL_GetUIDw1:
 472              		.fnstart
 473              	.LFB48:
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
ARM GAS  /tmp/cc3AQi3H.s 			page 16


 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval Device identifier
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetUIDw1(void)
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 474              		.loc 1 401 0
 475              		.cfi_startproc
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 476              		.loc 1 402 0
 477 0000 014B     		ldr	r3, .L38
 478 0002 1868     		ldr	r0, [r3]
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 479              		.loc 1 403 0
 480              		@ sp needed
 481 0004 7047     		bx	lr
 482              	.L39:
 483 0006 C046     		.align	2
 484              	.L38:
 485 0008 B0F7FF1F 		.word	536868784
 486              		.cfi_endproc
 487              	.LFE48:
 488              		.cantunwind
 489              		.fnend
 491              		.section	.text.HAL_GetUIDw2,"ax",%progbits
 492              		.align	2
 493              		.global	HAL_GetUIDw2
 494              		.code	16
 495              		.thumb_func
 497              	HAL_GetUIDw2:
 498              		.fnstart
 499              	.LFB49:
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval Device identifier
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** uint32_t HAL_GetUIDw2(void)
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 500              		.loc 1 410 0
 501              		.cfi_startproc
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****    return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 502              		.loc 1 411 0
 503 0000 014B     		ldr	r3, .L41
 504 0002 1868     		ldr	r0, [r3]
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 505              		.loc 1 412 0
 506              		@ sp needed
 507 0004 7047     		bx	lr
 508              	.L42:
 509 0006 C046     		.align	2
 510              	.L41:
 511 0008 B4F7FF1F 		.word	536868788
 512              		.cfi_endproc
 513              	.LFE49:
 514              		.cantunwind
 515              		.fnend
 517              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 518              		.align	2
ARM GAS  /tmp/cc3AQi3H.s 			page 17


 519              		.global	HAL_DBGMCU_EnableDBGStopMode
 520              		.code	16
 521              		.thumb_func
 523              	HAL_DBGMCU_EnableDBGStopMode:
 524              		.fnstart
 525              	.LFB50:
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode       
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 526              		.loc 1 419 0
 527              		.cfi_startproc
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 528              		.loc 1 420 0
 529 0000 024A     		ldr	r2, .L44
 530 0002 5168     		ldr	r1, [r2, #4]
 531 0004 0223     		mov	r3, #2
 532 0006 0B43     		orr	r3, r1
 533 0008 5360     		str	r3, [r2, #4]
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 534              		.loc 1 421 0
 535              		@ sp needed
 536 000a 7047     		bx	lr
 537              	.L45:
 538              		.align	2
 539              	.L44:
 540 000c 00580140 		.word	1073829888
 541              		.cfi_endproc
 542              	.LFE50:
 543              		.cantunwind
 544              		.fnend
 546              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 547              		.align	2
 548              		.global	HAL_DBGMCU_DisableDBGStopMode
 549              		.code	16
 550              		.thumb_func
 552              	HAL_DBGMCU_DisableDBGStopMode:
 553              		.fnstart
 554              	.LFB51:
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode       
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 555              		.loc 1 428 0
 556              		.cfi_startproc
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 557              		.loc 1 429 0
 558 0000 024A     		ldr	r2, .L47
 559 0002 5368     		ldr	r3, [r2, #4]
 560 0004 0221     		mov	r1, #2
 561 0006 8B43     		bic	r3, r1
ARM GAS  /tmp/cc3AQi3H.s 			page 18


 562 0008 5360     		str	r3, [r2, #4]
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 563              		.loc 1 430 0
 564              		@ sp needed
 565 000a 7047     		bx	lr
 566              	.L48:
 567              		.align	2
 568              	.L47:
 569 000c 00580140 		.word	1073829888
 570              		.cfi_endproc
 571              	.LFE51:
 572              		.cantunwind
 573              		.fnend
 575              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 576              		.align	2
 577              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 578              		.code	16
 579              		.thumb_func
 581              	HAL_DBGMCU_EnableDBGStandbyMode:
 582              		.fnstart
 583              	.LFB52:
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode       
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 584              		.loc 1 437 0
 585              		.cfi_startproc
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 586              		.loc 1 438 0
 587 0000 024A     		ldr	r2, .L50
 588 0002 5168     		ldr	r1, [r2, #4]
 589 0004 0423     		mov	r3, #4
 590 0006 0B43     		orr	r3, r1
 591 0008 5360     		str	r3, [r2, #4]
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 592              		.loc 1 439 0
 593              		@ sp needed
 594 000a 7047     		bx	lr
 595              	.L51:
 596              		.align	2
 597              	.L50:
 598 000c 00580140 		.word	1073829888
 599              		.cfi_endproc
 600              	.LFE52:
 601              		.cantunwind
 602              		.fnend
 604              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 605              		.align	2
 606              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 607              		.code	16
 608              		.thumb_func
 610              	HAL_DBGMCU_DisableDBGStandbyMode:
 611              		.fnstart
 612              	.LFB53:
ARM GAS  /tmp/cc3AQi3H.s 			page 19


 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** 
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** /**
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode       
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   * @retval None
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   */
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** {
 613              		.loc 1 446 0
 614              		.cfi_startproc
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 615              		.loc 1 447 0
 616 0000 024A     		ldr	r2, .L53
 617 0002 5368     		ldr	r3, [r2, #4]
 618 0004 0421     		mov	r1, #4
 619 0006 8B43     		bic	r3, r1
 620 0008 5360     		str	r3, [r2, #4]
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal.c **** }
 621              		.loc 1 448 0
 622              		@ sp needed
 623 000a 7047     		bx	lr
 624              	.L54:
 625              		.align	2
 626              	.L53:
 627 000c 00580140 		.word	1073829888
 628              		.cfi_endproc
 629              	.LFE53:
 630              		.cantunwind
 631              		.fnend
 633              		.global	uwTick
 634              		.section	.bss.uwTick,"aw",%nobits
 635              		.align	2
 636              		.set	.LANCHOR0,. + 0
 639              	uwTick:
 640 0000 00000000 		.space	4
 641              		.text
 642              	.Letext0:
 643              		.file 2 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 644              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 645              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 646              		.file 5 "Drivers/CMSIS/Include/core_cm0.h"
 647              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 648              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 649              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 650              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
ARM GAS  /tmp/cc3AQi3H.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal.c
     /tmp/cc3AQi3H.s:18     .text.HAL_MspInit:0000000000000000 $t
     /tmp/cc3AQi3H.s:23     .text.HAL_MspInit:0000000000000000 HAL_MspInit
      .ARM.exidx.text.HAL_MspInit:0000000000000000 $d
     /tmp/cc3AQi3H.s:38     .text.HAL_MspDeInit:0000000000000000 $t
     /tmp/cc3AQi3H.s:43     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
    .ARM.exidx.text.HAL_MspDeInit:0000000000000000 $d
     /tmp/cc3AQi3H.s:57     .text.HAL_DeInit:0000000000000000 $t
     /tmp/cc3AQi3H.s:62     .text.HAL_DeInit:0000000000000000 HAL_DeInit
     /tmp/cc3AQi3H.s:99     .text.HAL_DeInit:0000000000000020 $d
       .ARM.extab.text.HAL_DeInit:0000000000000000 $d
       .ARM.exidx.text.HAL_DeInit:0000000000000000 $d
     /tmp/cc3AQi3H.s:106    .text.HAL_InitTick:0000000000000000 $t
     /tmp/cc3AQi3H.s:111    .text.HAL_InitTick:0000000000000000 HAL_InitTick
     .ARM.exidx.text.HAL_InitTick:0000000000000000 $d
     /tmp/cc3AQi3H.s:150    .text.HAL_Init:0000000000000000 $t
     /tmp/cc3AQi3H.s:155    .text.HAL_Init:0000000000000000 HAL_Init
     /tmp/cc3AQi3H.s:186    .text.HAL_Init:000000000000001c $d
         .ARM.extab.text.HAL_Init:0000000000000000 $d
         .ARM.exidx.text.HAL_Init:0000000000000000 $d
     /tmp/cc3AQi3H.s:192    .text.HAL_IncTick:0000000000000000 $t
     /tmp/cc3AQi3H.s:197    .text.HAL_IncTick:0000000000000000 HAL_IncTick
     /tmp/cc3AQi3H.s:213    .text.HAL_IncTick:000000000000000c $d
      .ARM.exidx.text.HAL_IncTick:0000000000000000 $d
     /tmp/cc3AQi3H.s:220    .text.HAL_GetTick:0000000000000000 $t
     /tmp/cc3AQi3H.s:225    .text.HAL_GetTick:0000000000000000 HAL_GetTick
     /tmp/cc3AQi3H.s:239    .text.HAL_GetTick:0000000000000008 $d
      .ARM.exidx.text.HAL_GetTick:0000000000000000 $d
     /tmp/cc3AQi3H.s:246    .text.HAL_Delay:0000000000000000 $t
     /tmp/cc3AQi3H.s:251    .text.HAL_Delay:0000000000000000 HAL_Delay
        .ARM.exidx.text.HAL_Delay:0000000000000000 $d
     /tmp/cc3AQi3H.s:303    .text.HAL_SuspendTick:0000000000000000 $t
     /tmp/cc3AQi3H.s:308    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
     /tmp/cc3AQi3H.s:325    .text.HAL_SuspendTick:000000000000000c $d
  .ARM.exidx.text.HAL_SuspendTick:0000000000000000 $d
     /tmp/cc3AQi3H.s:332    .text.HAL_ResumeTick:0000000000000000 $t
     /tmp/cc3AQi3H.s:337    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
     /tmp/cc3AQi3H.s:354    .text.HAL_ResumeTick:000000000000000c $d
   .ARM.exidx.text.HAL_ResumeTick:0000000000000000 $d
     /tmp/cc3AQi3H.s:361    .text.HAL_GetHalVersion:0000000000000000 $t
     /tmp/cc3AQi3H.s:366    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
     /tmp/cc3AQi3H.s:378    .text.HAL_GetHalVersion:0000000000000004 $d
.ARM.exidx.text.HAL_GetHalVersion:0000000000000000 $d
     /tmp/cc3AQi3H.s:385    .text.HAL_GetREVID:0000000000000000 $t
     /tmp/cc3AQi3H.s:390    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
     /tmp/cc3AQi3H.s:405    .text.HAL_GetREVID:0000000000000008 $d
     .ARM.exidx.text.HAL_GetREVID:0000000000000000 $d
     /tmp/cc3AQi3H.s:412    .text.HAL_GetDEVID:0000000000000000 $t
     /tmp/cc3AQi3H.s:417    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
     /tmp/cc3AQi3H.s:433    .text.HAL_GetDEVID:000000000000000c $d
     .ARM.exidx.text.HAL_GetDEVID:0000000000000000 $d
     /tmp/cc3AQi3H.s:440    .text.HAL_GetUIDw0:0000000000000000 $t
     /tmp/cc3AQi3H.s:445    .text.HAL_GetUIDw0:0000000000000000 HAL_GetUIDw0
     /tmp/cc3AQi3H.s:459    .text.HAL_GetUIDw0:0000000000000008 $d
     .ARM.exidx.text.HAL_GetUIDw0:0000000000000000 $d
     /tmp/cc3AQi3H.s:466    .text.HAL_GetUIDw1:0000000000000000 $t
ARM GAS  /tmp/cc3AQi3H.s 			page 21


     /tmp/cc3AQi3H.s:471    .text.HAL_GetUIDw1:0000000000000000 HAL_GetUIDw1
     /tmp/cc3AQi3H.s:485    .text.HAL_GetUIDw1:0000000000000008 $d
     .ARM.exidx.text.HAL_GetUIDw1:0000000000000000 $d
     /tmp/cc3AQi3H.s:492    .text.HAL_GetUIDw2:0000000000000000 $t
     /tmp/cc3AQi3H.s:497    .text.HAL_GetUIDw2:0000000000000000 HAL_GetUIDw2
     /tmp/cc3AQi3H.s:511    .text.HAL_GetUIDw2:0000000000000008 $d
     .ARM.exidx.text.HAL_GetUIDw2:0000000000000000 $d
     /tmp/cc3AQi3H.s:518    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
     /tmp/cc3AQi3H.s:523    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/cc3AQi3H.s:540    .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
.ARM.exidx.text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $d
     /tmp/cc3AQi3H.s:547    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
     /tmp/cc3AQi3H.s:552    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/cc3AQi3H.s:569    .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
.ARM.exidx.text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $d
     /tmp/cc3AQi3H.s:576    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
     /tmp/cc3AQi3H.s:581    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/cc3AQi3H.s:598    .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
.ARM.exidx.text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $d
     /tmp/cc3AQi3H.s:605    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
     /tmp/cc3AQi3H.s:610    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/cc3AQi3H.s:627    .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
.ARM.exidx.text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $d
     /tmp/cc3AQi3H.s:639    .bss.uwTick:0000000000000000 uwTick
     /tmp/cc3AQi3H.s:635    .bss.uwTick:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr1
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
__aeabi_unwind_cpp_pr0
